# Generated by Django 4.1.6 on 2023-09-04 10:48

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import myapp1.manager


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Employees',
            fields=[
                ('employeeID', models.AutoField(primary_key=True, serialize=False, validators=[django.core.validators.MinLengthValidator(6)], verbose_name='Employee ID')),
                ('firstName', models.CharField(help_text='Enter Your First Name', max_length=200, verbose_name='First Name')),
                ('lastName', models.CharField(help_text='Enter Your Last Name', max_length=200, verbose_name='Last Name')),
                ('email', models.EmailField(help_text='Enter Valid Email', max_length=254, validators=[django.core.validators.EmailValidator()])),
                ('role', models.CharField(default=1, help_text='Select Job Role', max_length=200)),
                ('address', models.CharField(help_text='Enter Address', max_length=1000)),
                ('profile', models.ImageField(help_text='Upload Your Profile Picture', upload_to='')),
                ('status', models.CharField(default=1, help_text='Choice Status', max_length=200)),
                ('isDeleted', models.BooleanField(default=False)),
                ('createdDate', models.DateTimeField()),
                ('updatedDate', models.DateTimeField()),
                ('lastLogin', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='event',
            fields=[
                ('eventid', models.AutoField(primary_key=True, serialize=False, verbose_name='EVENT ID')),
                ('has_tickets', models.BooleanField()),
                ('name', models.CharField(max_length=50)),
                ('datetime_from', models.DateTimeField()),
                ('image', models.ImageField(blank=True, null=True, upload_to='')),
                ('datetime_to', models.DateTimeField()),
                ('total_count', models.IntegerField(blank=True, null=True)),
                ('total_cost', models.IntegerField(blank=True, null=True)),
                ('total_price', models.IntegerField(blank=True, null=True)),
                ('paid_amount', models.IntegerField(blank=True, null=True)),
                ('pending_amount', models.IntegerField(blank=True, null=True)),
                ('hassub_event', models.BooleanField(default=False, verbose_name='Has Sub-Event')),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
            },
        ),
        migrations.CreateModel(
            name='Payorderss2',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('number', models.IntegerField(blank=True, null=True)),
                ('email', models.CharField(blank=True, max_length=100, null=True)),
                ('tickettype', models.CharField(blank=True, max_length=100, null=True)),
                ('number_of_tickets', models.IntegerField(blank=True, null=True)),
                ('totalprice', models.IntegerField(blank=True, null=True)),
                ('paid', models.BooleanField(default=False)),
                ('eventid', models.ForeignKey(db_column='eventid', on_delete=django.db.models.deletion.CASCADE, to='myapp1.event')),
            ],
        ),
        migrations.CreateModel(
            name='SystemConfigurationm',
            fields=[
                ('SystemConfigurationid', models.AutoField(primary_key=True, serialize=False)),
                ('emailid', models.CharField(max_length=255)),
                ('emailpassword', models.CharField(max_length=100)),
                ('razorkeyid', models.CharField(max_length=100)),
                ('razorsecret', models.CharField(max_length=100)),
                ('email_port', models.IntegerField()),
                ('email_host', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='userqr2',
            fields=[
                ('userqrid', models.AutoField(primary_key=True, serialize=False)),
                ('qrcode', models.ImageField(upload_to='')),
                ('orderid', models.ForeignKey(db_column='id', on_delete=django.db.models.deletion.CASCADE, to='myapp1.payorderss2')),
            ],
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_of_ticket', models.CharField(choices=[('Premium', 'Premium'), ('Gold', 'Gold'), ('Silver', 'Silver')], max_length=20)),
                ('ticket_price', models.IntegerField()),
                ('eventid', models.ForeignKey(db_column='eventid', on_delete=django.db.models.deletion.CASCADE, to='myapp1.event')),
            ],
        ),
        migrations.CreateModel(
            name='subevent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('start_dat', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp1.event')),
            ],
        ),
        migrations.CreateModel(
            name='sub_location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sub_location', models.CharField(max_length=50)),
                ('landmark', models.CharField(max_length=50)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp1.event')),
            ],
        ),
        migrations.CreateModel(
            name='location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
                ('street_name', models.CharField(max_length=50)),
                ('landmark', models.CharField(max_length=50)),
                ('city', models.CharField(max_length=50)),
                ('country', models.CharField(max_length=50)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp1.event')),
            ],
        ),
        migrations.CreateModel(
            name='EventTransaction',
            fields=[
                ('transactionID', models.AutoField(primary_key=True, serialize=False)),
                ('transactionNumber', models.CharField(editable=False, max_length=36, unique=True)),
                ('paymentMethod', models.CharField(default=1, max_length=200)),
                ('amount', models.IntegerField()),
                ('createdDate', models.DateTimeField()),
                ('eventID', models.ForeignKey(db_column='eventid', on_delete=django.db.models.deletion.CASCADE, to='myapp1.event')),
            ],
        ),
        migrations.CreateModel(
            name='eventEmployees',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rolenote', models.CharField(max_length=365)),
                ('employeeID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp1.employees')),
                ('eventID', models.ForeignKey(db_column='eventid', on_delete=django.db.models.deletion.CASCADE, to='myapp1.event')),
            ],
        ),
        migrations.CreateModel(
            name='Clients',
            fields=[
                ('clientID', models.AutoField(primary_key=True, serialize=False, validators=[django.core.validators.MinLengthValidator(6)])),
                ('client_name', models.CharField(max_length=254)),
                ('contact_number', models.IntegerField()),
                ('email', models.EmailField(max_length=254)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('lastLogin', models.DateTimeField()),
                ('event', models.ForeignKey(db_column='eventid', on_delete=django.db.models.deletion.CASCADE, to='myapp1.event')),
            ],
        ),
        migrations.CreateModel(
            name='category',
            fields=[
                ('category_id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('image', models.ImageField(upload_to=None, verbose_name='Image')),
                ('path', models.CharField(max_length=200)),
                ('description', models.CharField(max_length=254)),
                ('status', models.CharField(choices=[('Draft/Unpublished', 'Draft/Unpublished'), ('Published', 'Published'), ('Sold Out', 'Sold Out'), ('Cancelled', 'Cancelled'), ('Postponed', 'Postponed'), ('Rescheduled', 'Rescheduled'), ('Completed', 'Completed'), ('On Hold', 'On Hold'), ('Pending Approval', 'Pending Approval'), ('Confirmed', 'Confirmed'), ('Pending Payment', 'Pending Payment'), ('Paid', 'Paid'), ('Refunded', 'Refunded'), ('Waiting List', 'Waiting List'), ('Attended', 'Attended'), ('No Show', 'No Show'), ('VIP', 'VIP'), ('General Admission', 'General Admission'), ('Early Bird', 'Early Bird')], default=1, max_length=200)),
                ('isDeleted', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='user_custom_set', to='auth.group', verbose_name='groups')),
                ('parentcategory', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='myapp1.category')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_custom_set', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('otp', models.CharField(blank=True, max_length=8, null=True)),
                ('forget_password_token', models.CharField(blank=True, max_length=200, null=True)),
                ('last_login_time', models.DateTimeField(blank=True, null=True)),
                ('last_logout_time', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', myapp1.manager.UserManager()),
            ],
        ),
    ]
